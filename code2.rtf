#include <stdio.h>\
#include <stdlib.h>\
#include <time.h>\
\
#define INITIAL_TIME_QUANTUM 6\
#define MIN_TIME_QUANTUM 1\
#define TOTAL_JOBS 20\
\
// Process structure\
struct Process \{\
    int process_id;\
    int remaining_exec_time; \
    int current_time_quantum; \
\};\
\
// Job structure\
struct Job \{\
    int burst_time; // CPU burst time\
    int arrival;    // Arrival time\
    int remaining_exec_time; // Remaining execution time for the job\
    int response;   // Response time\
\};\
\
struct Job jobs[TOTAL_JOBS];\
\
// Function to execute a process\
void executeProcess(struct Process* proc) \{\
    printf("Executing Process %d for %d units of time\\n", proc->process_id, proc->current_time_quantum);\
    if (proc->remaining_exec_time <= proc->current_time_quantum) \{\
        printf("Process %d has completed.\\n", proc->process_id);\
        proc->remaining_exec_time = 0;\
    \} else \{\
        proc->remaining_exec_time -= proc->current_time_quantum;\
    \}\
\}\
\
void adjustTimeQuantum(struct Process* proc) \{\
    if (proc->current_time_quantum > MIN_TIME_QUANTUM) \{\
        proc->current_time_quantum--;\
    \}\
\}\
\
void generateJobRequests() \{\
    srand(time(NULL));\
\
    int current_time = 0;\
\
    for (int i = 0; i < TOTAL_JOBS; i++) \{\
        jobs[i].burst_time = rand() % 20 + 1;\
        jobs[i].arrival = current_time;\
        jobs[i].remaining_exec_time = jobs[i].burst_time;\
        jobs[i].response = -1;\
\
        printf("Job %d: Arrival time: %d, CPU Burst: %d\\n", i, jobs[i].arrival, jobs[i].burst_time);\
\
        int pause = rand() % 5 + 1;\
        current_time += pause;\
    \}\
\}\
\
int main() \{\
    generateJobRequests(); // Generate job requests\
\
    int num_jobs = TOTAL_JOBS;\
\
    // Initialize processes with initial remaining execution times and time quantum\
    struct Process procs[TOTAL_JOBS];\
\
    for (int i = 0; i < num_jobs; i++) \{\
        procs[i].process_id = i + 1;                                // Assign a process ID\
        procs[i].remaining_exec_time = jobs[i].burst_time;          // Initialize remaining execution time\
        procs[i].current_time_quantum = INITIAL_TIME_QUANTUM;       // Initialize time quantum\
    \}\
\
    int time_quantum = INITIAL_TIME_QUANTUM;\
\
    while (1) \{\
        int all_completed = 1;\
\
        for (int i = 0; i < num_jobs; i++) \{\
            if (procs[i].remaining_exec_time > 0) \{\
                if (jobs[i].response == -1) \{\
                    jobs[i].response = jobs[i].arrival;\
                \}\
                executeProcess(&procs[i]);\
                adjustTimeQuantum(&procs[i]);\
                all_completed = 0;\
            \}\
        \}\
\
        if (all_completed) \{\
            break;\
        \}\
    \}\
\
    // Calculate metrics for all jobs\
    int total_waiting_time = 0;\
    int total_turnaround_time = 0;\
\
    for (int i = 0; i < num_jobs; i++) \{\
        int turnaround_time = jobs[i].arrival + jobs[i].burst_time;\
        int waiting_time = turnaround_time - jobs[i].burst_time;\
        total_waiting_time += waiting_time;\
        total_turnaround_time += turnaround_time;\
\
        printf("Job %d:\\n", i);\
        printf("Response Time: %d\\n", jobs[i].response);\
        printf("Waiting Time: %d\\n", waiting_time);\
        printf("Turnaround Time: %d\\n", turnaround_time);\
    \}\
\
    float avg_waiting_time = (float)total_waiting_time / num_jobs;\
    float avg_turnaround_time = (float)total_turnaround_time / num_jobs;\
\
    printf("\\nAverage Waiting Time: %.2f\\n", avg_waiting_time);\
    printf("Average Turnaround Time: %.2f\\n", avg_turnaround_time);\
\
    return 0;\
\}\
}
